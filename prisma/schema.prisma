// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(cuid())
  fullname String
  email    String    @unique
  image    String
  password String?
  isAdmin  Boolean   @default(false)
  url     Url?
  advertizw Advertize[]
  news     News[]
  posts    Post[]
  comments Comment[]
}

model NewsCategory {
  id          String @id @default(cuid())
  title       String @unique
  description String @db.Text
  news        News[]
}

model News {
  id            String       @id @default(cuid())
  title         String       @unique
  image         String
  description   String       @db.Text
  userId        String
  viewed        Int          @default(0)
  user          User         @relation(fields: [userId], references: [id])
  categoryTitle String
  newsCategory  NewsCategory @relation(fields: [categoryTitle], references: [title], onDelete: Cascade)
  comments      Comment[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model PostCategory {
  id          String @id @default(cuid())
  title       String @unique
  description String @db.Text
  image       String
  posts       Post[]
}

model Post {
  id           String       @id @default(cuid())
  title        String @unique
  image        String
  description  String @db.Text
  viewed        Int          @default(0)
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  categoryTitle String
  postCategory PostCategory @relation(fields: [categoryTitle], references: [title], onDelete: Cascade)
  comments     Comment[]
}

model Comment {
  id      String @id @default(cuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  newsId String?
  news   News?   @relation(fields: [newsId], references: [id], onDelete: Cascade)

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Url {
    id      String @id @default(cuid())
    url     String @unique
    userId  String @unique
    user    User   @relation(fields: [userId], references: [id])

}

model Advertize{
   id      String @id @default(cuid())
   image   String
   userId String
   user    User   @relation(fields: [userId], references: [id])
}
